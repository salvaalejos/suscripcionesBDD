package com.mycompany.proyectosuscripciones;
import Models.Entities.User;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingWorker;

/**
 *
 * @author Link
 */
public class ServerFrame extends javax.swing.JFrame {

    public static final int LOGIN_PORT = 9930;
    public static final int REGISTER_PORT = 9960;

    public static final String CLIENT_IP = "127.0.0.1";
    public static final String SERVER_IP = "127.0.0.1";
    public static final int CLIENT_PORT = 9990;

    public static final String USERS_FILE = "usuarios.json";

    private ArrayList<User> usersList = new ArrayList<>();

    private HiloLogin hiloLogin;
    private HiloRegister hiloRegister;

    private boolean ejecutaLogin = true;
    private boolean ejecutaRegister = true;

    /**
     * Creates new form ServerFrame
     */
    public ServerFrame() {
        initComponents();

        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servidor");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Log de operaciones:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 88, Short.MAX_VALUE))
                                        .addComponent(jScrollPane1))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        leerUsuarios();

        hiloLogin = new HiloLogin();
        hiloLogin.execute();

        hiloRegister = new HiloRegister();
        hiloRegister.execute();
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        hiloRegister.cancel(true);
        ejecutaRegister = false;

        hiloLogin.cancel(true);
        ejecutaLogin = false;
    }

    private void leerUsuarios()
    {
        usersList.clear();
        try {
            BufferedReader br = new BufferedReader(
                    new FileReader(USERS_FILE)
            );
            String lectura;
            String resultado = "";
            while((lectura = br.readLine()) != null) {
                resultado += lectura;
            }
            br.close();

            if(resultado.length() > 0) {
                java.lang.reflect.Type listType =
                        new TypeToken<ArrayList<User>>() {}.getType();

                usersList = new Gson().fromJson(resultado, listType);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void escribirUsuarios() {
        try {
            String json = new Gson().toJson(usersList);

            FileWriter fw = new FileWriter(USERS_FILE);
            fw.write(json);
            fw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void enviaRespuesta(Response respuesta) {
        try {
            Socket socket = new Socket(
                    CLIENT_IP, CLIENT_PORT
            );
            ObjectOutputStream oos = new ObjectOutputStream(
                    socket.getOutputStream()
            );
            oos.writeObject(respuesta);
            oos.close();
            socket.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerFrame().setVisible(true);
            }
        });
    }

    private void bitacoraServidor(List chunks)
    {
        Response respuesta = new Response();
        respuesta.setResp("" + chunks.get(0));
        respuesta.setUsuario((User)chunks.get(2));

        User u = respuesta.getUsuario();

        enviaRespuesta(respuesta);

        jTextArea1.append(
                chunks.get(1) + "\n\t" + u.toString()
        );
        jTextArea1.append("\n");
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration

    class HiloLogin extends SwingWorker {

        @Override
        protected Object doInBackground() throws Exception {
            while(ejecutaLogin) {
                try {
                    ServerSocket serverSocket = new ServerSocket(
                            LOGIN_PORT
                    );
                    Socket socket = serverSocket.accept();

                    ObjectInputStream ois = new ObjectInputStream(
                            socket.getInputStream()
                    );

                    User usuario = (User) ois.readObject();

                    boolean existe = false;
                    for(User u : usersList) {
                        if(u.getUser().equals(usuario.getUser()) &&
                                u.getPassword().equals(usuario.getPassword())) {
                            usuario = u;
                            existe = true;
                            break;
                        }
                    }

                    publish(
                            existe ? "SI" : "NO",
                            existe ? "Acceso concedido" : "Acceso denegado",
                            usuario
                    );

                    ois.close();
                    socket.close();
                    serverSocket.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            return "";
        }

        @Override
        protected void process(List chunks) {
            bitacoraServidor(chunks);
        }

    }

    /**
     * Hilo que escucha peticiones de registro
     */
    class HiloRegister extends SwingWorker {

        @Override
        protected Object doInBackground() throws Exception {
            while(ejecutaRegister) {
                try {
                    ServerSocket serverSocket = new ServerSocket(
                            REGISTER_PORT
                    );
                    Socket socket = serverSocket.accept();

                    ObjectInputStream ois = new ObjectInputStream(
                            socket.getInputStream()
                    );

                    User usuario = (User) ois.readObject();

                    if(usuario != null) {
                        usersList.add(usuario);
                        escribirUsuarios();

                        publish("SI", "Registrado", usuario);
                    } else {
                        publish("NO", "No se registró", "");
                    }

                    ois.close();
                    socket.close();
                    serverSocket.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            return "";
        }

        @Override
        protected void process(List chunks) {
            bitacoraServidor(chunks);
        }

    }

}